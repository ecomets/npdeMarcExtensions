library(survival)
library(ggpubr)
library(here)
library(mclust)
setwd(here::here())
path="C:/Users/Marc/ownCloud/Documents/Projet 10 github/"
source(paste0(path,'all_funs_v2.R'))
data_L = fread("Case_2.2/data_L.txt",na.strings = ".")
sim_L = fread("Case_2.2/sim_L.txt",na.strings = ".")
data_TTE = fread("Case_2.2/data_TTE_interval_cens.txt",na.strings = ".")
sim_TTE = fread("Case_2.2/sim_TTE.txt",na.strings = ".")
npde = main_compute_npde(obs = list(data_L,data_TTE),sim = list(sim_L,sim_TTE),
type_outcome = c("continuous","TTE"),dependancies = list(2,0),verbose = T,
options=list(NULL,list(censoring_type="interval")))
###
pval=main_compute_pvalue(res = npde,type_outcome = c("continuous","TTE"),options=list(NULL,NULL))
global_pvalue = pval[[3]]
global_pvalue
list_p = main_compute_plot(npde,type_outcome = c("continuous","TTE"),
options=list(list(outcome="npd",variable="time"),
list(outcome="pd_wo_ties",variable="time")))
for(p in 1:length(list_p)) assign(paste0("p",p),list_p[[p]])
grid.arrange(p1,p2,ncol=1)
list_p = main_compute_plot(npde,type_outcome = c("continuous","TTE"),
options=list(list(outcome="npd",variable="time",type="vpc"),
list(outcome="pd_wo_ties",variable="time",type="vpc")))
for(p in 1:length(list_p)) assign(paste0("p",p),list_p[[p]])
grid.arrange(p1,p2,ncol=1)
list_p = main_compute_plot(npde,type_outcome = c("continuous","TTE"),
options=list(list(outcome="npd",variable="time",type="vpc"),
list(outcome="pd_wo_ties",variable="time",type="vpc",censoring_time="interval")))
for(p in 1:length(list_p)) assign(paste0("p",p),list_p[[p]])
grid.arrange(p1,p2,ncol=1)
list_p = main_compute_plot(npde,type_outcome = c("continuous","TTE"),
options=list(list(outcome="npd",variable="time",type="vpc"),
list(outcome="pd_wo_ties",variable="time",type="vpc",censoring_type="interval")))
for(p in 1:length(list_p)) assign(paste0("p",p),list_p[[p]])
grid.arrange(p1,p2,ncol=1)
rm(list=ls())
library(ggplot2)
library(data.table)
library(gridExtra)
library(survival)
library(ggpubr)
library(here)
library(mclust)
setwd(here::here())
path="C:/Users/Marc/ownCloud/Documents/Projet 10 github/"
source(paste0(path,'all_funs_v2.R'))
data_L = fread("Case_2.3/data_cat.txt",na.strings = ".")
sim_L = fread("Case_2.3/sim_cat.txt",na.strings = ".")
data_TTE = fread("Case_2.3/data_TTE.txt",na.strings = ".")
sim_TTE = fread("Case_2.3/sim_TTE.txt",na.strings = ".")
npde = main_compute_npde(obs = list(data_L,data_TTE),sim = list(sim_L,sim_TTE),
type_outcome = c("categorical","TTE"),dependancies = list(2,0),verbose = T,options=list(list(order_cat=1:5)))
npde
###
pval=main_compute_pvalue(res = npde,type_outcome = c("categorical","TTE"),options=list(list(order_cat=1:5),NULL))
## npde
list_p = main_compute_plot(npde,type_outcome = c("categorical","TTE"),
options=list(list(outcome="npd",variable="time"),
list(outcome="pd_wo_ties",variable="time")))
for(p in 1:length(list_p)) assign(paste0("p",p),list_p[[p]])
grid.arrange(p1,p2,ncol=1)
## VPC
list_p = main_compute_plot(npde,type_outcome = c("categorical","TTE"),
options=list(list(outcome="npd",variable="time"),
list(outcome="pd_wo_ties",variable="time",type="vpc",censoring_type="interval")))
## VPC
list_p = main_compute_plot(npde,type_outcome = c("categorical","TTE"),
options=list(list(outcome="npd",variable="time"),
list(outcome="pd_wo_ties",variable="time",type="vpc")))
for(p in 1:length(list_p)) assign(paste0("p",p),list_p[[p]])
grid.arrange(p1,p2,ncol=1)
rm(list=ls())
library(ggplot2)
library(data.table)
library(gridExtra)
library(survival)
library(ggpubr)
library(here)
library(mclust)
setwd(here::here())
path="C:/Users/Marc/ownCloud/Documents/Projet 10 github/"
source(paste0(path,'all_funs_v2.R'))
data_TTE = fread("Case_1.2/data_TTE.txt",na.strings = ".")
sim_TTE = fread("Case_1.2/sim_TTE.txt",na.strings = ".")
### Computation ########
### Base options: compute the npd
npde = main_compute_npde(obs = list(data_TTE),sim = list(sim_TTE),
type_outcome = c("TTE"),verbose = T,options=NULL)
###
pval=main_compute_pvalue(npde,type_outcome = "TTE")
pval
rm(list=ls())
library(ggplot2)
library(data.table)
library(gridExtra)
library(survival)
library(ggpubr)
library(here)
library(mclust)
setwd(here::here())
path="C:/Users/Marc/ownCloud/Documents/Projet 10 github/"
source(paste0(path,'all_funs_v2.R'))
data_L = fread("Case_1.1/data_L.txt",na.strings = ".")
sim_L = fread("Case_1.1/sim_L.txt",na.strings = ".")
### Base options: compute the npde with cholesky decorrelation method
npde = main_compute_npde(obs = list(data_L),sim = list(sim_L),
type_outcome = c("continuous"),verbose = T,options=NULL)
rm(list=ls())
library(ggplot2)
library(data.table)
library(gridExtra)
library(survival)
library(ggpubr)
library(here)
library(mclust)
setwd(here::here())
path="C:/Users/Marc/ownCloud/Documents/Projet 10 github/"
source(paste0(path,'all_funs.R'))
data_L = fread("Case_1.1/data_L.txt",na.strings = ".")
sim_L = fread("Case_1.1/sim_L.txt",na.strings = ".")
### Base options: compute the npde with cholesky decorrelation method
npde = main_compute_npde(obs = list(data_L),sim = list(sim_L),
type_outcome = c("continuous"),verbose = T,options=NULL)
### compute the npde with polar decorrelation method
npde = main_compute_npde(obs = list(data_L),sim = list(sim_L),
type_outcome = c("continuous"),verbose = T,
options = list(list(decorr.method="polar")))
### compute the npde with ties in npde values: may impact the test
npde = main_compute_npde(obs = list(data_L),sim = list(sim_L),
type_outcome = c("continuous"),verbose = T,
options = list(list(ties=T)))
### compute the npd only
npd = main_compute_npde(obs = list(data_L),sim = list(sim_L),
type_outcome = c("continuous"),verbose = T,
options = list(list(compute_npde=F)))
### Test ########
npde = main_compute_npde(obs = list(data_L),sim = list(sim_L),
type_outcome = c("continuous"),verbose = T,options=NULL)
###
pval=main_compute_pvalue(npde,type_outcome = "continuous")
global_pvalue = pval[[2]]
### Base plot options: scatter of npd over time
main_compute_plot(res=npde,type_outcome = c("continuous"),options = NULL)
### scatter of npd over binned time by specifying bin=T; default: "width" method, "equal"; "user"; "optimal" otherwise
main_compute_plot(res=npde,type_outcome = c("continuous"),options = list(list(variable="time",bin=T,
plot.opt=list(bin.method="width",
bin.number=NULL,
bin.breaks=NULL,
bin.extreme=NULL,
xlog=F))))
### scatter of npd over pred by specifying variable="ypred"
main_compute_plot(res=npde,type_outcome = c("continuous"),options = list(list(variable="ypred",bin=T,
plot.opt=list(bin.method="width",
bin.number=NULL,
bin.breaks=NULL,
bin.extreme=NULL,
xlog=F))))
#### Example with categorical covariate
npde[[1]][[1]][,sex:=sample(c("M","F"),size = length(id),replace = T)]
### scatter of npd over pred by specifying variable="ypred"
main_compute_plot(res=npde,type_outcome = c("continuous"),options = list(list(variable=c("time","sex"),bin=T,
plot.opt=list(bin.method="width",
bin.number=NULL,
bin.breaks=NULL,
bin.extreme=NULL,
xlog=F))))
#### Example with continuous covariate
npde[[1]][[1]][,cont:=rweibull(length(id),1,500)]
### scatter of npd over pred by specifying variable="ypred"
main_compute_plot(res=npde,type_outcome = c("continuous"),options = list(list(variable=c("cont"),bin=T,
plot.opt=list(bin.method="equal",
bin.number=NULL,
# bin.breaks=NULL,
bin.breaks=c(0,300,600,1000,1500,2000),
bin.extreme=NULL,
xlog=F))))
### vpc with type="vpc
main_compute_plot(res=npde,type_outcome = c("continuous"),options = list(list(variable=c("time"),
bin=T,
plot.opt=list(bin.method="width",
bin.number=NULL,
bin.breaks=NULL,
# bin.breaks=c(0,300,600,1000,1500,2000),
bin.extreme=NULL,
xlog=F),
type="vpc")))
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case1.2.R')
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case1.2.R')
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case1.2.R')
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case1.3.R')
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case1.3.R')
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case1.4.R')
### Representation ########
### Base plot options: scatter of npd over time
main_compute_plot(res=npde,type_outcome = c("categorical"),options = NULL)
### scatter of npd over binned time by specifying bin=T; default: "width" method, "equal"; "user"; "optimal" otherwise
main_compute_plot(res=npde,type_outcome = c("categorical"),options = list(list(variable="time",bin=T,
plot.opt=list(bin.method="width",
bin.number=NULL,
bin.breaks=NULL,
bin.extreme=NULL,
xlog=F))))
### scatter of npd over pred by specifying variable="ypred"
#### Example with categorical covariate
npde[[1]][[1]][,sex:=sample(c("M","F"),size = length(id),replace = T)]
### scatter of npd over pred by specifying variable="ypred"
main_compute_plot(res=npde,type_outcome = c("categorical"),options = list(list(variable=c("time","sex"),bin=T,
plot.opt=list(bin.method="width",
bin.number=NULL,
bin.breaks=NULL,
bin.extreme=NULL,
xlog=F))))
#### Example with continuous covariate
npde[[1]][[1]][,cont:=rweibull(length(id),1,500)]
### scatter of npd over pred by specifying variable="ypred"
main_compute_plot(res=npde,type_outcome = c("continuous"),options = list(list(variable=c("cont"),bin=T,
plot.opt=list(bin.method="equal",
bin.number=NULL,
# bin.breaks=NULL,
bin.breaks=c(0,300,600,1000,1500,2000),
bin.extreme=NULL,
xlog=F))))
#### Computation of VPC
### vpc with type="vpc
main_compute_plot(res=npde,type_outcome = c("categorical"),options = list(list(variable=c("time"),
bin=T,
plot.opt=list(bin.method="width",
bin.number=NULL,
bin.breaks=NULL,
# bin.breaks=c(0,300,600,1000,1500,2000),
bin.extreme=NULL,
xlog=F),
type="vpc")))
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case2.1.R')
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case2.2.R')
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case2.2.R')
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/computation_npde_case2.3.R')
warnings()
rm(list=ls())
library(ggplot2)
library(data.table)
library(gridExtra)
library(survival)
library(ggpubr)
library(here)
library(mclust)
setwd(here::here())
path="C:/Users/Marc/ownCloud/Documents/Projet 10 github/"
source(paste0(path,'all_funs.R'))
data_L = fread("Case_2.3/data_cat.txt",na.strings = ".")
sim_L = fread("Case_2.3/sim_cat.txt",na.strings = ".")
data_TTE = fread("Case_2.3/data_TTE.txt",na.strings = ".")
sim_TTE = fread("Case_2.3/sim_TTE.txt",na.strings = ".")
npde = main_compute_npde(obs = list(data_L,data_TTE),sim = list(sim_L,sim_TTE),
type_outcome = c("categorical","TTE"),dependancies = list(2,0),verbose = T,options=list(list(order_cat=1:5)))
obs = list(data_L,data_TTE)
sim = list(sim_L,sim_TTE)
type_outcome = c("categorical","TTE")
dependancies = list(2,0)
options=list(list(order_cat=1:5))
noutcome=length(obs)
if(is.null(dependancies)) dependancies = lapply(1:noutcome,function(x) 0 )
res=list()
o=1
#### Load data and sim ###
print(paste0("computation outcome: ", type_outcome[[o]]))
obs_o = obs[[o]]
sim_full_o = sim[[o]]
sim_o = copy(sim_full_o)
if(is.null(dependancies[[o]])) dependancies[[o]]=0
if(dependancies[[o]]!=0) sim_dependancies = sim[[dependancies[[o]]]][,c("rep","id","time","y"),with=F]
#### Load options ##
if(type_outcome[o]=="categorical") order_cat = paste0(sort(unique(c(obs_o$y,sim_full_o$y))))
# compute_pvalue=F
censoring_type="right"
ties=F
compute_npde=T
compute_npd=T
decorr.method="cholesky"
method="nall"
if(length(options)>0){
if(length(options)<o) options[o]=NULL
if(!is.null(options[o][[1]])){
opt = options[[o]]
if("order_cat"%in%names(opt))  order_cat=opt[[which(names(opt)%in%"order_cat")]]
# if("compute_pvalue"%in%names(opt))  compute_pvalue=opt[[which(names(opt)%in%"compute_pvalue")]]
if("censoring_type"%in%names(opt))  censoring_type=opt[[which(names(opt)%in%"censoring_type")]]
if("ties"%in%names(opt))  ties=opt[[which(names(opt)%in%"ties")]]
if("compute_npde"%in%names(opt))  compute_npde=opt[[which(names(opt)%in%"compute_npde")]]
if("compute_npd"%in%names(opt))  compute_npd=opt[[which(names(opt)%in%"compute_npd")]]
if("decorr.method"%in%names(opt))  decorr.method=opt[[which(names(opt)%in%"decorr.method")]]
if("method"%in%names(opt))  method=opt[[which(names(opt)%in%"method")]]
}
}
names(sim_dependancies)[1:4]=c("rep","id","tte","status")
sim_o = merge(sim_full_o,sim_dependancies,by=c("rep","id"))
sim_o
sim_o=sim_o[time<tte]
sim_o
obs=obs_o
sim = sim_o
response = "y"
obs_o
sim2 = sim[,c("rep","id","time","y"),with=F]
if("rep"%!in%names(obs)) obs$rep=1
res=copy(obs)
res$pd=-1
# res$pd_wo_ties=-1
res$npd=-1
res[,paste0("P",order_cat):=0]
pb = txtProgressBar(min = 0, max = length(unique(obs$rep)), style = 3)
all_rep = unique(obs$rep)
for(i_in_obs in 1:length(all_rep)){
npde <- calc_npd_discrete(dat=obs[rep==all_rep[i_in_obs]],sim = sim2,response = "y",ties=F,order_cat=order_cat)
# obs[rep==i_in_obs]$pd=npde$pd
# obs[rep==i_in_obs]$pd_wo_ties=npde$pd_wo_ties
# obs[rep==i_in_obs]$npd=npde$npd
#
res[rep==all_rep[i_in_obs]] = npde[,names(res),with=F]
setTxtProgressBar(pb, i_in_obs)
}
i_in_obs
npde <- calc_npd_discrete(dat=obs[rep==all_rep[i_in_obs]],sim = sim2,response = "y",ties=F,order_cat=order_cat)
npde
res
res=copy(obs)
res
res$pd=-1
# res$pd_wo_ties=-1
res$npd=-1
res[,paste0("P",order_cat):=0]
res
all_rep = unique(obs$rep)
all_rep
sim2
order_cat
calc_npd_discrete(dat=obs[rep==all_rep[i_in_obs]],sim = sim2,response = "y",ties=F,order_cat=order_cat)
obs
all_rep[i_in_obs]
all_rep[i_in_obs]]
all_rep[i_in_obs]
obs[rep==all_rep[i_in_obs]]
dat=obs[rep==all_rep[i_in_obs]]
sim = sim2
response = "y"
ties=F
dat
dat$y = dat[[response]]
sim$y = sim[[response]]
design_tij = unique(dat[,c("id","time"),with=F])
design_tij
sim
design_tij
sim = merge(sim,design_tij,by=c("id","time"))
sim
ID = unique(dat$id)
dat$pd = -1
dat
# ncat = length(unique(dat$y))
# pb = txtProgressBar(min = 0, max = length(unique(obs$id)), style = 3)
# sim[,paste0("P",c(1,3,2)):=NULL]
# sim[,paste0("P",c(1,3,2)):= cat_frac(y,size=3,name=paste0(c(1,3,2))),by=c("id","time")]
# sim2<-copy(sim)
#
sim[,paste0("P",order_cat):= cat_frac(y,name=order_cat),by=c("id","time")]
sim
prop_sim=unique(sim[,c("id","time",paste0("P",order_cat)),with=F])
prop_sim
sim
dat
duplicated(dat)
dat[duplicated(dat)]
# ncat = length(unique(dat$y))
# pb = txtProgressBar(min = 0, max = length(unique(obs$id)), style = 3)
# sim[,paste0("P",c(1,3,2)):=NULL]
# sim[,paste0("P",c(1,3,2)):= cat_frac(y,size=3,name=paste0(c(1,3,2))),by=c("id","time")]
# sim2<-copy(sim)
#
sim[,paste0("P",order_cat):= cat_frac(y,name=order_cat),by=c("id","time")]
sim
# ncat = length(unique(dat$y))
# pb = txtProgressBar(min = 0, max = length(unique(obs$id)), style = 3)
# sim[,paste0("P",c(1,3,2)):=NULL]
# sim[,paste0("P",c(1,3,2)):= cat_frac(y,size=3,name=paste0(c(1,3,2))),by=c("id","time")]
# sim2<-copy(sim)
#
sim[,{
cat_all=cat_frac(y,name=order_cat)
},by=c("id","time")]
cat_frac
# ncat = length(unique(dat$y))
# pb = txtProgressBar(min = 0, max = length(unique(obs$id)), style = 3)
# sim[,paste0("P",c(1,3,2)):=NULL]
# sim[,paste0("P",c(1,3,2)):= cat_frac(y,size=3,name=paste0(c(1,3,2))),by=c("id","time")]
# sim2<-copy(sim)
#
sim[,{
cat_all=cat_frac(y,name=order_cat)
},by=c("id","time")]
prop_sim
# ncat = length(unique(dat$y))
# pb = txtProgressBar(min = 0, max = length(unique(obs$id)), style = 3)
# sim[,paste0("P",c(1,3,2)):=NULL]
# sim[,paste0("P",c(1,3,2)):= cat_frac(y,size=3,name=paste0(c(1,3,2))),by=c("id","time")]
# sim2<-copy(sim)
#
sim[,paste0("P",order_cat):= cat_frac(y,name=order_cat),by=c("id","time")]
sim
dat
design_tij
sim
sim2 = sim[,c("rep","id","time","y"),with=F]
dat$y = dat[[response]]
sim$y = sim[[response]]
sim$y
sim
design_tij = unique(dat[,c("id","time"),with=F])
design_tij
unique(sim[,c("id","time"),with=F])
merge(design_tij,unique(sim[,c("id","time"),with=F]),by="id",all=T)
design_tij
unique(sim[,c("id","time"),with=F])
all=T
merge(design_tij,unique(sim[,c("id","time"),with=F]),by="id",all=T)
merge(design_tij,unique(sim[,c("id","time"),with=F]),by=c("id","time"),all=T)
merge(design_tij,unique(sim[,c("id","time"),with=F]),by=c("id"))
merge(design_tij,unique(sim[,c("id","time"),with=F]),by=c("id"),allow.cartesian = T)
design_tij
design_tij_sim = unique(sim[,c("id","time"),with=F])
design_tij = unique(dat[,c("id","time"),with=F])
design_tij_sim = unique(sim[,c("id","time"),with=F])
design_tij
design_tij_sim
design_tij[,list(length(time)),by="id"]
design_tij_sim[,list(length(time)),by="id"]
cbind(design_tij[,list(length(time)),by="id"],design_tij_sim[,list(length(time)),by="id"])
temp=cbind(design_tij[,list(length(time)),by="id"],design_tij_sim[,list(length(time)),by="id"])
temp=cbind(design_tij[,list(length(time)),by="id"],design_tij_sim[,list(V2=length(time)),by="id"])
temp[V1!=V2]
design_tij
design_tij[id==11]
design_tij_sim[id==11]
sim2 = sim[,c("rep","id","time","y"),with=F]
sim2
sim2[id==11]
obs_o = obs[[o]]
sim_full_o = sim[[o]]
sim_o = copy(sim_full_o)
obs_o
obs = list(data_L)
sim = list(sim_L)
o
#### Load data and sim ###
print(paste0("computation outcome: ", type_outcome[[o]]))
obs_o = obs[[o]]
sim_full_o = sim[[o]]
sim_o = copy(sim_full_o)
if(is.null(dependancies[[o]])) dependancies[[o]]=0
if(dependancies[[o]]!=0) sim_dependancies = sim[[dependancies[[o]]]][,c("rep","id","time","y"),with=F]
obs = list(data_L,data_TTE)
sim = list(sim_L,sim_TTE)
dependancies = list(2,0)
obs_o = obs[[o]]
sim_full_o = sim[[o]]
sim_o = copy(sim_full_o)
if(is.null(dependancies[[o]])) dependancies[[o]]=0
if(dependancies[[o]]!=0) sim_dependancies = sim[[dependancies[[o]]]][,c("rep","id","time","y"),with=F]
#### Load options ##
if(type_outcome[o]=="categorical") order_cat = paste0(sort(unique(c(obs_o$y,sim_full_o$y))))
# compute_pvalue=F
censoring_type="right"
ties=F
compute_npde=T
compute_npd=T
decorr.method="cholesky"
method="nall"
if(length(options)>0){
if(length(options)<o) options[o]=NULL
if(!is.null(options[o][[1]])){
opt = options[[o]]
if("order_cat"%in%names(opt))  order_cat=opt[[which(names(opt)%in%"order_cat")]]
# if("compute_pvalue"%in%names(opt))  compute_pvalue=opt[[which(names(opt)%in%"compute_pvalue")]]
if("censoring_type"%in%names(opt))  censoring_type=opt[[which(names(opt)%in%"censoring_type")]]
if("ties"%in%names(opt))  ties=opt[[which(names(opt)%in%"ties")]]
if("compute_npde"%in%names(opt))  compute_npde=opt[[which(names(opt)%in%"compute_npde")]]
if("compute_npd"%in%names(opt))  compute_npd=opt[[which(names(opt)%in%"compute_npd")]]
if("decorr.method"%in%names(opt))  decorr.method=opt[[which(names(opt)%in%"decorr.method")]]
# if("method"%in%names(opt))  method=opt[[which(names(opt)%in%"method")]]
}
}
names(sim_dependancies)[1:4]=c("rep","id","tte","status")
sim_o
sim_o[id==11]
sim_dependancies
sim_dependancies[id==11]
sim_o = merge(sim_full_o,sim_dependancies,by=c("rep","id"))
sim_o
sim_o = merge(sim_full_o,sim_dependancies,by=c("rep","id"))
sim_o
sim_o[(status==1&time<tte)||(status==0&time<=tte)]
sim_o = merge(sim_full_o,sim_dependancies,by=c("rep","id"))
sim_o
sim_o[(status==1&time<tte)||(status==0&time<=tte)]
=sim_o[(status==1&time<tte)||(status==0&time<=tte)]
sim_o[(status==1&time<tte)||(status==0&time<=tte)]
source('C:/Users/Marc/ownCloud/Documents/Projet 10 github/all_funs.R', encoding = 'UTF-8')
npde = main_compute_npde(obs = list(data_L,data_TTE),sim = list(sim_L,sim_TTE),
type_outcome = c("categorical","TTE"),dependancies = list(2,0),verbose = T,options=list(list(order_cat=1:5)))
npde
